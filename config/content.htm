<h1>有關本網站</h1>
<p>這裡是50833106的紀錄學習歷程網<img alt="Just Saying Hi Hello GIF - JustSayingHi Hello Hey - Discover ..." height="301" src="https://i.pinimg.com/originals/0d/bd/bc/0dbdbc0eddd3cdf8829712ba59effe11.gif" width="402"/></p>
<p><img alt="" height="199" src="/images/小貓咪.jpg" width="211"/></p>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h2>利用 cmsimde 建立靜態網誌方法</h2>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules</p>
<h2>Develop</h2>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h2>Cmsimde</h2>
<p><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a><span> </span>是一套利用 Python 解譯程式語言所編寫的網際內容管理系統, 使用者可以用來建立動態網站, 靜態網站, 網誌與網際簡報系統.</p>
<p>程式語言就其執行的方式, 可以分為編譯式與解譯式等兩種.</p>
<p>編譯式語言例如: C 程式語言</p>
<p>解譯式語言例如: Python 程式語言</p>
<p>編寫程式語言是工程師與電腦溝通的途徑之一, 工程師編寫計算機程式在電腦上執行, 可以透過電腦強大與重複的運算能力來解決問題.</p>
<p>CMSiMDE 就是工程師希望將各種與產品開發的過程資料, 存放在網站上, 除了可用於工程師之間的溝通外, 還能夠將產品開發的細節, 或者特定工具的使用詳細記錄, 以作為往後的參考.</p>
<h3>如何使用 CMSiMDE</h3>
<p>(1) 以子模組的方式使用 CMSiMDE</p>
<p>將 Github 倉儲 git clone 到近端工作區之後, 可以利用 git submodule add 指令將遠端倉儲中的 CMSiMDE 程式碼納為倉儲中的 cmsimde 子目錄, 並且保持與遠端原始碼的版次關聯 (也就是能夠指定採用遠端特定版本的 CMSiMDE 程式碼).</p>
<p>好處: 子模組可以與遠端官方的倉儲保持關聯, 一旦 CMSiMDE 更新版本, 使用者可以利用 git pull 直接拉下遠端 CMSiMDE 的最新程式碼.</p>
<p>壞處: 使用者若要 git clone 遠端的倉儲至近端, 需要加上 --recurse-submodules 選項</p>
<p>(2) 不以子模組的方式使用 CMSiMDE</p>
<p>假如不需要保持與遠端 CMSiMDE 倉儲特定版次的關聯性, 可以直接將 CMSiMDE 倉儲中的檔案, 直接放入 cmsimde 目錄, 並將其中 up_dir 的內容複製到希望建立網頁的倉儲主目錄中即可.</p>
<p>好處: 使用者可以直接使用 git clone 指令, 拉下遠端倉儲的所有資料.</p>
<p>壞處: 失去與遠端 CMSiMDE 倉儲的關聯, 假如要使用最新改版後的 CMSiMDE 原始碼, 必須另外 git clone 然後再取代倉儲中 cmsimde 的所有檔案.</p>
<p><span style="color: #000000;"><strong></strong></span></p>
<p></p>
<p></p>
<h1>主題</h1>
<h2>Google Blogger</h2>
<p>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/12Ypf02FVP9l7a9ufZfhRicN-rzCKkAf5/view?usp=sharing">2010_BeginningGoogleBlogger.pdf</a></p>
<h2>WCM</h2>
<p>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/1gLb9_6FEv58wVX2uShG_3sgUseFEcH_y/view?usp=sharing">2020wcm_topic_1.pdf</a>.</p>
<p>What is a content management system?</p>
<p>Analyzing your information life cycle.</p>
<p>Overview of enterprise content management.</p>
<h2>Git</h2>
<p><span>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/1YkLWsDVRlScSuSBQv2Aa1JSjvbydJli-/view?usp=sharing">IntroductionToVersionControlAndGit.pdf</a>.</span></p>
<p><span>What is version control?</span></p>
<p><span>Git installation and setup.</span></p>
<p><span>Git getting started.</span></p>
<p><span>Commits and remote git.</span></p>
<h3>Github</h3>
<p><span>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/1vnkDLW1cg8hKEMUdjDstvWqiS4R1n3IC/view?usp=sharing">GithubPrimer.pdf</a></span></p>
<p><span>Login to your gm email account and download<span> </span><a href="https://drive.google.com/file/d/18MiM_d95ustohAqoUfx-gc-2dUE9Av0n/view?usp=sharing">ConflictsGUIToolAdvGit.pdf</a></span></p>
<p><span></span></p>
<h1>上課內容重點筆記</h1>
<p><img alt="情報】官方提供的鬼滅之刃各種GIF圖@鬼滅之刃哈啦板- 巴哈姆特" height="321" src="https://img.gifmagazine.net/gifmagazine/images/3902338/original.gif" width="401"/></p>
<h2>proxy</h2>
<p><b>代理</b>（英語：<span lang="en">Proxy</span>）也稱<b>網路代理</b>，是一種特殊的網路服務，允許一個<a class="new" href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E7%BB%88%E7%AB%AF&amp;action=edit&amp;redlink=1" title="網路終端（頁面不存在）">網路終端</a>（一般為<a href="https://zh.wikipedia.org/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AF" title="客戶端">客戶端</a>）通過這個服務與另一個<a class="new" href="https://zh.wikipedia.org/w/index.php?title=%E7%BD%91%E7%BB%9C%E7%BB%88%E7%AB%AF&amp;action=edit&amp;redlink=1" title="網路終端（頁面不存在）">網路終端</a>（一般為<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8" title="伺服器">伺服器</a>）進行非直接的連接。一些<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E5%85%B3" title="閘道器">閘道器</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8" title="路由器">路由器</a>等網路裝置具備網路代理功能。一般認為代理服務有利於保障網路終端的隱私或安全，防止攻擊。</p>
<p>提供代理服務的電腦系統或其它類型的網路終端稱為代理伺服器（英文：Proxy Server）。一個完整的代理請求過程為：<a href="https://zh.wikipedia.org/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AF" title="客戶端">客戶端</a>首先與代理伺服器建立連接，接著根據代理伺服器所使用的代理協定，請求對目標伺服器建立連接、或者獲得目標伺服器的指定資源（如：檔案）。在後一種情況中，代理伺服器可能對目標伺服器的資源下載至本地<a href="https://zh.wikipedia.org/wiki/%E7%BC%93%E5%AD%98" title="快取">快取</a>，如果客戶端所要取得的資源在代理伺服器的快取之中，則代理伺服器並不會向目標伺服器傳送請求，而是直接傳回已快取的資源。一些代理協定允許代理伺服器改變客戶端的原始請求、目標伺服器的原始回應，以滿足代理協定的需要。代理伺服器的選項和設定在電腦程式中，通常包括一個「防火牆」，允許用戶輸入代理位址，它會遮蓋他們的網路活動，可以允許繞過網際網路過濾實現網路存取。</p>
<p>代理伺服器的基本行為就是接收客戶端傳送的請求後轉發給其他伺服器。代理不改變請求<a class="mw-redirect" href="https://zh.wikipedia.org/wiki/URI" title="URI">URI</a>，會直接傳送給前方持有資源的目標伺服器。</p>
<p>持有資源實體的伺服器被稱為<b>源伺服器</b>。從源伺服器返回的回應經過代理伺服器後再傳給客戶端。</p>
<h2>NAT</h2>
<p><b>網路位址轉換</b><span>（英語：</span><span lang="en"><b>N</b>etwork<span> </span><b>A</b>ddress<span> </span><b>T</b>ranslation</span><span>，縮寫：</span><span lang="en"><b>NAT</b></span><span>；又稱</span><b>網路掩蔽</b><span>、</span><b><span lang="en">IP</span>掩蔽</b><span>）在</span><a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E7%B6%B2%E7%B5%A1" title="計算機網路">計算機網路</a><span>中是一種在</span><span lang="en">IP</span><a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E5%B0%81%E5%8C%85" title="封包">封包</a><span>通過</span><a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8" title="路由器">路由器</a><span>或</span><a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E5%A2%99" title="防火牆">防火牆</a><span>時重寫來源</span><span lang="en"><a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80" title="IP地址">IP地址</a></span><span>或目的</span><span lang="en">IP</span><span>位址的技術。這種技術被普遍使用在有多台主機但只通過一個公有IP位址存取</span><a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF" title="網際網路">網際網路</a><span>的</span><a class="mw-redirect" href="https://zh.wikipedia.org/wiki/%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C" title="私有網路">私有網路</a><span>中。它是一個方便且得到了廣泛應用的技術。當然，</span><span lang="en">NAT</span><span>也讓主機之間的通信變得複雜，導致了通信效率的降低。</span></p>
<h2>電腦之硬體設備</h2>
<h3>CPU</h3>
<p>中央處理器，電腦的心臟，速度越快效果越好，若電腦為一家店，則CPU可以說是店員，反應越快越佳。</p>
<h3>記憶體RAM</h3>
<p>電腦系統運作實戰存資料的地方，其大小也是影響電腦速率快慢的重要因素。</p>
<h3>硬碟</h3>
<p>儲存系統軟體、應用軟體及資料的地方，一台主機可以裝多顆硬碟。</p>
<h2>IPv4與IPv6之差別</h2>
<h3>IPv4</h3>
<p>IPv4的格式是32位元長度，位置能提供2的32次方個，換算後約42億個。雖然有這麼多個，但依舊被消耗殆盡。</p>
<h3>IPv6</h3>
<p><span>IPv6，他所能提供的ip位置遠遠超過IPv4的數量，簡單來說，轉換到IPv6後ip位置的數量幾乎不可能用完。</span></p>
<h2>紙本筆記</h2>
<p><span><img alt="" height="563" src="/images/IMG_6248.JPG" width="422"/><img alt="" height="533" src="/images/IMG_6249.JPG" width="400"/><img alt="" height="533" src="/images/IMG_6250.JPG" width="400"/><img alt="" height="533" src="/images/IMG_6251.JPG" width="400"/></span></p>
<p><span></span></p>
<div>
<div class="syntaxhighlighter py" id="highlighter_906297"></div>
</div>
<p><br/><br/></p>
<h1>課程進度</h1>
<p><img alt="Screaming My Neighbor Totoro GIF by O&amp;O, Inc - Find &amp; Share on GIPHY" src="https://media0.giphy.com/media/l41m3G139gE7e3JXq/source.gif"/></p>
<h2>w1</h2>
<p></p>
<p>建立blogger</p>
<p>課程小單字</p>
<div class="kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">1 super computer 超級電腦</div>
<div dir="auto">2pc=person computer 個人電腦 
<div dir="auto">3mainframe 伺服器主機</div>
<div dir="auto">4 server 伺服器 (虛擬 實體)</div>
<div dir="auto">5 mobile phone 手機</div>
</div>
<div dir="auto">6 microcontroller 微控制器</div>
<div dir="auto"></div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">Port 埠號</div>
<div dir="auto">DHCP動態網路位置</div>
</div>
<h2>w2</h2>
<p><span>課程小筆記</span></p>
<div class="kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">IPv4 version 4 IP 四個區段,用.隔開</div>
<div dir="auto">IPv6 version 6 IP 八個區段,用:隔開</div>
<div dir="auto">[2001:288:6004:17::53]:3128 140.130.17.53:3128</div>
<div dir="auto">[2001:288:6004:17::42]:3128 140.130.17.53:254(系gateway通道)</div>
<div dir="auto">[2001:288:6004:17::17]:3128 140.130.1.*(校主幹)</div>
<div dir="auto">[2001:288:6004:17::7]:3128</div>
<div dir="auto"></div>
<div dir="auto">課程小單字</div>
<div dir="auto">tcp/ip==trandmision control protocol/internet protocol</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">inter-net==inter-national(國際)</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">(網際,inter+networt)</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">protocal 協定
<div dir="auto">microscope 顯微鏡</div>
<div dir="auto">telescope 望遠鏡
<div dir="auto">
<div dir="auto">trasmit 傳輸</div>
<div dir="auto">data 資料</div>
</div>
<div dir="auto">packet 封包</div>
</div>
</div>
<div dir="auto"></div>
<div dir="auto">control 控制
<div dir="auto">macro 巨(比原子(atom)大)</div>
<div dir="auto">atomic bomb 原子彈中華電信 dns. server. dns==domain name server 符號名稱伺服器</div>
</div>
<div dir="auto">version 版本(短時間)</div>
<div dir="auto">edition 版本(長時間)</div>
<div dir="auto">router 路由器</div>
<div dir="auto">route 路徑</div>
<div dir="auto">remote login 遠端登入</div>
<div dir="auto">
<div dir="auto">micro 微</div>
</div>
<div dir="auto"></div>
</div>
<p></p>
<h2>w3建立可攜式環境</h2>
<p></p>
<p>建立可攜式環境</p>
<p>為了讓工程師可以在不同的 Windows 10 64 位元電腦上管理 CMSiMDE 網際內容管理系統, 因此需要 Python 解譯環境以及一個文字檔案的編輯器.</p>
<p>這裡所安裝的 Python 解譯器選擇由 C 所編寫的 CPython, 可以從<span> </span><a href="https://www.python.org/">https://www.python.org/</a>  下載安裝. 但是在此我們要將 Python 解譯系統配置在 USB 隨身碟上, 使用者可以隨身攜帶, 一旦配置完成後, 可以在任何一台 Windows 10 64 位元的筆電或電腦上執行 Python 或 C 程式.</p>
<p>可攜 Python 程式環境的建立步驟:</p>
<p>安裝 Python 套件時, 不要安裝 pip, 之後將 Python38 目錄複製到 data 目錄中, 然後建立 start.bat 指定使用可攜系統中的 Python, 之後再利用 g<a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=2ahUKEwivpbG6gfHoAhURrZQKHUT8ARcQFjAAegQIAhAB&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">et-pip.py,</a><span> </span>以命令列中的 python get-pip.py 安裝 pip.</p>
<p>可攜 Tiny C 程式環境的建立步驟:</p>
<p>從<span> </span><a href="https://bellard.org/tcc/">https://bellard.org/tcc/</a><span> </span>下載 Tiny C, 將 tcc 解開壓縮後放到 data 目錄中. 然後修改 wscite 目錄中的 cpp.properties, 使用 Tiny C 類解譯 .c 程式.</p>
<p>選用的文字編輯器:<span> </span><a href="https://www.scintilla.org/SciTE.html">https://www.scintilla.org/SciTE.html</a></p>
<p>建立完成的可攜程式環境:</p>
<p>下載<span> </span><a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等)</p>
<p>將 wcmj2020_tool.7z 解壓縮到隨身碟或電腦硬碟中, 將 home 與 home_ipv6 目錄中的 .gitconfig user.name 與 user.email 改為自己的 Github 帳號與 email 後, 利用 start.bat 啟動可攜系統, 利用 stop.bat 關閉可攜系統.</p>
<p><br/><br/><br/><br/></p>
<h2>w4建網站</h2>
<div class="kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">此內容管理系統以 https:..github.com.mdecourse.cmsimde 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">利用 cmsimde 建立靜態網誌方法:</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">在 github 建立倉儲, git clone 到近端</div>
<div dir="auto">參考https:..github.com.mdecourse.newcms, 加入除了 cmsimde 目錄外的所有內容</div>
<div dir="auto">以 git submodule add https:..github.com.mdecourse.cmsimde cmsimde</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">建立 cmsimde 目錄, 並從 github 取下子模組內容.</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</div>
<div dir="auto">git clone --recurse-submodules https:..github.com.mdecourse.newcms.git</div>
</div>
<h2>w5</h2>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">筆記</div>
<div dir="auto">firmwarre 韌體</div>
<div dir="auto"></div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql"></div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">software 軟體</div>
<div dir="auto">hardware 硬體
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto"></div>
<div dir="auto">terminology 專業術語</div>
<div dir="auto">particular 特別</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">technical 技術</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">application 應用</div>
</div>
</div>
</div>
</div>
<div dir="auto">
<div dir="auto">command wundow 命令視窗</div>
<div dir="auto">submodule 子模組</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">machine language 機器語言</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">URL:Uniform Resourse Locator 統一資源定位</div>
<div dir="auto">-----------------------------------------------------------------------------------------------------------------</div>
<div dir="auto">
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">程式令:</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">Y:←指y槽</div>
<div dir="auto">Y:\ ←表示Y槽的root根目錄</div>
<div dir="auto">&gt; 為回應符號(prormptsign)</div>
<div dir="auto">\ 為blackslash 反斜線</div>
<div dir="auto">dir為顯示目錄內容的指令</div>
<div dir="auto">cd tmp 表示change directory 到指定的目錄</div>
<div dir="auto">git為分散式版次管理的指令名稱</div>
<div dir="auto">git clone表示要使用git對遠端的倉儲進行clone。</div>
<div dir="auto"></div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto"></div>
</div>
<div dir="auto">課堂小單字</div>
<div dir="auto">shell 殼</div>
<div dir="auto">interface 介面</div>
<div dir="auto">device 物件</div>
<div dir="auto">graphics 圖形</div>
<div dir="auto"></div>
<h2>w6</h2>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql"> <span>portable obs教學</span>
<div class="kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">portable obs</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">google hangout meet</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">streeming and recording</div>
<div dir="auto">---------------------------------------------------------------------------------------------------------------</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">讓手機可以利用電腦熱點上網：</div>
<div dir="auto">採用 https://www.tp-link.com/us/home-networking/usb-adapter/tl-wn725n/</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">將此一 USB Wifi adapter 連接電腦後, 若網路為 IPv4 協定時, 可以透過"設定 -&gt; 網路和網際網路 -&gt; 行動熱點", 選擇開啟並編輯"網路名稱與網路密碼"後, 讓至多 8 台手機透過熱點連線上網。</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">但是因為目前 Windows 10 並未提供 IPv6 網路協定下的網路熱點功能, 因此在純 IPv6 網路協定下無法使用"行動熱點"服務。</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">利用手機鏡頭當作 webcam:</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">Android: https://www.digitalcitizen.life/turn-android-smartphone-webcam-windows</div>
<div dir="auto">iPhone: https://www.makeuseof.com/tag/use-your-iphone-as-a-webcam-heres-how-ios/</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto"></div>
<div dir="auto">需要 clone 個人倉儲時：</div>
<div dir="auto">git clone --recurse-submodules 倉儲_url.git</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">例如: git clone --recurse-submodules https://github.com/mdecourse/wcmj2020.git</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">現場直播的 audio 錄音設定</div>
<div dir="auto">在電腦輔助設計室進行直播時, 由於現場有擴音設備, 因此採用 OBS 串流至 Youtube 的最佳收音並非從 Webcam 的麥克風, 而是從擴音器以 audio outpu 連接到電腦的麥克風插槽, 然後將 OBS 的 audio 設定為從電腦的麥克風收音.</div>
</div>
</div>
<p></p>
<h2>w7-8</h2>
<p> <span>grouping and meeting</span></p>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">第三組group3</div>
<div dir="auto">50833104 組長</div>
<div dir="auto">50833106</div>
<div dir="auto">50833113</div>
<div dir="auto">50833114</div>
<div dir="auto">50833116</div>
<div dir="auto">50833118</div>
<div dir="auto">50833120</div>
<div dir="auto">50833125</div>
<div dir="auto">50833140</div>
<div dir="auto">50833141</div>
<div dir="auto">
<div class="kvgmc6g5 cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto"></div>
<div dir="auto">proxy</div>
<div dir="auto"></div>
<div dir="auto">2001:288:6004:17::53</div>
</div>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<div dir="auto">2001:288:6004:17::42</div>
<div dir="auto">2001:288:6004:17::17</div>
<div dir="auto">2001:288:6004:17::4 "虛擬主機 可以校外連接"</div>
<div dir="auto"></div>
</div>
</div>
<div dir="auto">下周可能線上上課</div>
</div>
<h2>w9期中考</h2>
<p><span>學習這幾周下來之心得</span></p>
<p><span>w1教我們如何建立blogger</span></p>
<p><span>w2-4則是教我們如何用git指令建立cmsimde網站，並如何維護</span></p>
<p><span>而w6-w9則是教學如何開直播</span></p>
<h2>w10-12如何用ssh</h2>
<p>由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.</p>
<p>設定步驟如下:</p>
<p>1. 下載 Putty 工具組</p>
<p><span>從 </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" rel="nofollow">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a><span><span> </span>下載一般版, 或從<span> </span></span><a href="http://jakub.kotrla.net/putty/" rel="nofollow">http://jakub.kotrla.net/putty/</a><span><span> </span>下載特殊的可攜版本.</span></p>
<p><span>2. 利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後, 以 </span></p>
<div>
<div class="syntaxhighlighter js" id="highlighter_191820">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">ssh-keygen -t rsa -b 4096 -C<span> </span></code><code class="js string">"使用者學號"</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key</p>
<p>之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&gt; SSH and GPG keys 頁面下.</p>
<p>3. 接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_924293">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">修改啟動的 start.bat 加入下列設定:</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="js plain">set GIT_HOME=%Disk%:\portablegit\bin\</code></div>
<div class="line number4 index3 alt1"><code class="js plain">set GIT_SSH=%Disk%:\putty\plink.exe</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>4. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.</p>
<p>開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&gt;SSH-&gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. </p>
<p>並在 Connection-&gt;Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128.</p>
<p>5. 之後確定 home 下的 .ssh 目錄中的 config 設定檔案為:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_167439">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js preprocessor"># no proxy at home</code></div>
<div class="line number2 index1 alt1"><code class="js preprocessor">#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p</code></div>
<div class="line number3 index2 alt2"><code class="js preprocessor"># set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup</code></div>
<div class="line number4 index3 alt1"><code class="js plain">ProxyCommand y:/putty/plink.exe github.com %h %p</code></div>
<div class="line number5 index4 alt2"><code class="js spaces"> </code> </div>
<div class="line number6 index5 alt1"><code class="js plain">Host github.com</code></div>
<div class="line number7 index6 alt2"><code class="js spaces">    </code><code class="js plain">User git</code></div>
<div class="line number8 index7 alt1"><code class="js spaces">    </code><code class="js plain">Port 22</code></div>
<div class="line number9 index8 alt2"><code class="js spaces">    </code><code class="js plain">Hostname github.com</code></div>
<div class="line number10 index9 alt1"><code class="js spaces">    </code> </div>
<div class="line number11 index10 alt2"><code class="js spaces">    </code><code class="js preprocessor"># for connect.exe need openssh key format</code></div>
<div class="line number12 index11 alt1"><code class="js spaces">    </code><code class="js preprocessor">#IdentityFile "y:\home\.ssh\id_rsa_mdecourse"</code></div>
<div class="line number13 index12 alt2"><code class="js spaces">    </code><code class="js preprocessor"># for plink.exe need rsa key format but set under putty github.com session</code></div>
<div class="line number14 index13 alt1"><code class="js spaces">    </code><code class="js preprocessor"># plink.exe do not need the following setting</code></div>
<div class="line number15 index14 alt2"><code class="js spaces">    </code><code class="js preprocessor">#IdentityFile "y:\home\.ssh\mdecourse_putty_private.ppk"</code></div>
<div class="line number16 index15 alt1"><code class="js spaces"> </code> </div>
<div class="line number17 index16 alt2"><code class="js spaces">    </code><code class="js plain">TCPKeepAlive yes</code></div>
<div class="line number18 index17 alt1"><code class="js spaces">    </code><code class="js plain">IdentitiesOnly yes</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>6. 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_448571">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[core]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">repositoryformatversion = 0</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">filemode =<span> </span></code><code class="js keyword">false</code></div>
<div class="line number4 index3 alt1"><code class="js spaces">    </code><code class="js plain">bare =<span> </span></code><code class="js keyword">false</code></div>
<div class="line number5 index4 alt2"><code class="js spaces">    </code><code class="js plain">logallrefupdates =<span> </span></code><code class="js keyword">true</code></div>
<div class="line number6 index5 alt1"><code class="js spaces">    </code><code class="js plain">symlinks =<span> </span></code><code class="js keyword">false</code></div>
<div class="line number7 index6 alt2"><code class="js spaces">    </code><code class="js plain">ignorecase =<span> </span></code><code class="js keyword">true</code></div>
<div class="line number8 index7 alt1"><code class="js plain">[submodule]</code></div>
<div class="line number9 index8 alt2"><code class="js spaces">    </code><code class="js plain">active = .</code></div>
<div class="line number10 index9 alt1"><code class="js plain">[remote<span> </span></code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number11 index10 alt2"><code class="js spaces">    </code><code class="js preprocessor">#url = https://github.com/mdecourse/wcmj2020.git</code></div>
<div class="line number12 index11 alt1"><code class="js spaces">    </code><code class="js plain">url = git@github.com:mdecourse/wcmj2020.git</code></div>
<div class="line number13 index12 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/*:refs/remotes/origin/*</code></div>
<div class="line number14 index13 alt1"><code class="js plain">[branch<span> </span></code><code class="js string">"master"</code><code class="js plain">]</code></div>
<div class="line number15 index14 alt2"><code class="js spaces">    </code><code class="js plain">remote = origin</code></div>
<div class="line number16 index15 alt1"><code class="js spaces">    </code><code class="js plain">merge = refs/heads/master</code></div>
<div class="line number17 index16 alt2"><code class="js plain">[submodule<span> </span></code><code class="js string">"cmsimde"</code><code class="js plain">]</code></div>
<div class="line number18 index17 alt1"><code class="js spaces">    </code><code class="js plain">url = https:</code><code class="js comments">//github.com/mdecourse/cmsimde.git</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push了喔。</p>
<h2>W13</h2>
<p>利用 Windows 10 設定 -&gt; 選擇預設網頁瀏覽器, 使用 Google Chrome 作為預設瀏覽器.</p>
<p>隨身程式系統必須安裝 <span>google-api-python-client 與 oauth2client</span><br/><br/>pip install google-api-python-client oauth2client<br/><br/>OAuth 2.0 client IDs 程式類別可以選擇 other<br/><br/>使用者完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部</p>
<p>add_to_blogger 按鈕內容:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_11181">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
<div class="line number89 index88 alt2">89</div>
<div class="line number90 index89 alt1">90</div>
<div class="line number91 index90 alt2">91</div>
<div class="line number92 index91 alt1">92</div>
<div class="line number93 index92 alt2">93</div>
<div class="line number94 index93 alt1">94</div>
<div class="line number95 index94 alt2">95</div>
<div class="line number96 index95 alt1">96</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code><span> </span><code class="py plain">markdown<span> </span></code><code class="py keyword">import</code><span> </span><code class="py plain">markdown</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code><span> </span><code class="py plain">oauth2client<span> </span></code><code class="py keyword">import</code><span> </span><code class="py plain">client</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code><span> </span><code class="py plain">googleapiclient<span> </span></code><code class="py keyword">import</code><span> </span><code class="py plain">sample_tools</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code><span> </span><code class="py plain">os</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="py plain">os.environ[</code><code class="py string">'TZ'</code><code class="py plain">]<span> </span></code><code class="py keyword">=</code><span> </span><code class="py string">'Asia/Taipei'</code></div>
<div class="line number7 index6 alt2"><code class="py plain">argv<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">""</code></div>
<div class="line number8 index7 alt1"><code class="py comments"># 認證並建立服務</code></div>
<div class="line number9 index8 alt2"><code class="py comments"># name of the api is "blogger", version is "v3"</code></div>
<div class="line number10 index9 alt1"><code class="py comments"># description of the api is __doc__</code></div>
<div class="line number11 index10 alt2"><code class="py comments"># file name of the application: location of client_secrets.json</code></div>
<div class="line number12 index11 alt1"><code class="py plain">service, flags<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">sample_tools.init(</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">  </code><code class="py plain">argv,<span> </span></code><code class="py string">'blogger'</code><code class="py plain">,<span> </span></code><code class="py string">'v3'</code><code class="py plain">, __doc__,<span> </span></code><code class="py string">"./../../client_secrets.json"</code><code class="py plain">,</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">  </code><code class="py plain">scope</code><code class="py keyword">=</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">)</code></div>
<div class="line number15 index14 alt2"> </div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code><span> </span><code class="py plain">get_cat_tag_content(data):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py comments"># 用跳行符號分割</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">data_list<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">data.split(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py comments">#第 2 行為 title</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py plain">title</code><code class="py keyword">=</code><span> </span><code class="py plain">data_list[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py comments">#第 4 行為 category</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py plain">category<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">data_list[</code><code class="py value">3</code><code class="py plain">]</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py comments">#第 5 行為 tags</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py plain">tags<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">data_list[</code><code class="py value">4</code><code class="py plain">]</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 有多項資料的 content 型別為數列</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py comments"># 再將第 9 行之後的資料數列串回成以跳行隔開的資料</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py string">"\n"</code><code class="py plain">.join(data_list[</code><code class="py value">8</code><code class="py plain">:])</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments"># 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content.replace(</code><code class="py string">'&lt;!-- PELICAN_END_SUMMARY --&gt;'</code><code class="py plain">,<span> </span></code><code class="py string">'&lt;!--more--&gt;'</code><code class="py plain">)</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py comments"># 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~python', '[code lang="python"]')</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~', '[/code]')</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">    </code><code class="py keyword">return</code><span> </span><code class="py plain">title, category, tags, content</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="py comments"># 從目前所在節點的 body pan 中取出類別, tags 以及文章內容</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># p.h 為 @clean filename.md</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案</code></div>
<div class="line number40 index39 alt1"><code class="py plain">md_filename<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">p.h.split(</code><code class="py string">" "</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number41 index40 alt2"><code class="py plain">with<span> </span></code><code class="py functions">open</code><code class="py plain">(md_filename,<span> </span></code><code class="py string">'r'</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as content_file:</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">md_content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content_file.read()</code></div>
<div class="line number43 index42 alt2"><code class="py comments"># title_str, category_str, tags_str, content = get_cat_tag_content(p.b)</code></div>
<div class="line number44 index43 alt1"><code class="py plain">title_str, category_str, tags_str, content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">get_cat_tag_content(md_content)</code></div>
<div class="line number45 index44 alt2"><code class="py plain">category<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">category_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number46 index45 alt1"><code class="py plain">tags<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">tags_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">].split(</code><code class="py string">","</code><code class="py plain">)</code></div>
<div class="line number47 index46 alt2"><code class="py plain">tags.append(category)</code></div>
<div class="line number48 index47 alt1"><code class="py comments"># title 是一個單獨的字串</code></div>
<div class="line number49 index48 alt2"><code class="py plain">title<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">title_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number50 index49 alt1"><code class="py comments"># 將 markdown 格式 content 轉為 html</code></div>
<div class="line number51 index50 alt2"><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">markdown(content)</code></div>
<div class="line number52 index51 alt1"><code class="py comments"># 以下處理 content 的 &lt;h2&gt; 標題</code></div>
<div class="line number53 index52 alt2"><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content.replace(</code><code class="py string">"&lt;h2&gt;"</code><code class="py plain">,<span> </span></code><code class="py string">"&lt;h2&gt;&lt;font size='4'&gt;"</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content.replace(</code><code class="py string">"&lt;/h2&gt;"</code><code class="py plain">,<span> </span></code><code class="py string">"&lt;/font&gt;&lt;/h2&gt;"</code><code class="py plain">)</code></div>
<div class="line number55 index54 alt2"><code class="py comments"># g.es(content)</code></div>
<div class="line number56 index55 alt1"> </div>
<div class="line number57 index56 alt2"><code class="py keyword">try</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py comments">'''</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py comments">users = service.users()</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py comments"># 取得使用者 profile 資料</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py comments">user = users.get(userId='self').execute()</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py comments">print('網誌名稱: %s' % user['displayName'])</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py comments">'''</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py plain">blogs<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">service.blogs()</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py comments"># 取得使用者所建立網誌名稱</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">blogs<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">blogs.listByUser(userId</code><code class="py keyword">=</code><code class="py string">'self'</code><code class="py plain">).execute()</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments"># post_id is now blogs["items"][0]["id"]</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">blog_id<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">blogs[</code><code class="py string">"items"</code><code class="py plain">][</code><code class="py value">0</code><code class="py plain">][</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py comments">#for blog in blogs['items']:</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">        </code><code class="py comments">#print(blog['name'], blog['url'])</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py plain">posts<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">service.posts()</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">    </code><code class="py comments"># 新增網誌 post 時, 需要 post_id</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">    </code><code class="py plain">body<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">{</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py string">"kind"</code><code class="py plain">:<span> </span></code><code class="py string">"blogger#post"</code><code class="py plain">,</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py string">"id"</code><code class="py plain">: blog_id,</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">    </code><code class="py string">"title"</code><code class="py plain">: title,</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py comments"># 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">    </code><code class="py string">"content"</code><code class="py plain">: content,</code></div>
<div class="line number79 index78 alt2"><code class="py spaces">    </code><code class="py string">"labels"</code><code class="py plain">: tags</code></div>
<div class="line number80 index79 alt1"><code class="py spaces">    </code><code class="py plain">}</code></div>
<div class="line number81 index80 alt2"><code class="py spaces">    </code><code class="py plain">insert<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">posts.insert(blogId</code><code class="py keyword">=</code><code class="py plain">blog_id, body</code><code class="py keyword">=</code><code class="py plain">body)</code></div>
<div class="line number82 index81 alt1"><code class="py spaces">    </code><code class="py plain">posts_doc<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">insert.execute()</code></div>
<div class="line number83 index82 alt2"><code class="py spaces">    </code><code class="py plain">post_id<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">posts_doc[</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number84 index83 alt1"><code class="py spaces">    </code><code class="py comments">#print(posts_doc)</code></div>
<div class="line number85 index84 alt2"><code class="py spaces">    </code><code class="py plain">os.remove(</code><code class="py string">"blogger.dat"</code><code class="py plain">)</code></div>
<div class="line number86 index85 alt1"><code class="py spaces">    </code><code class="py comments"># 利用最後的 child 節點來儲存 post_id</code></div>
<div class="line number87 index86 alt2"><code class="py spaces">    </code><code class="py plain">to_save_post_id<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">p.insertAsLastChild()  </code></div>
<div class="line number88 index87 alt1"><code class="py spaces">    </code><code class="py comments"># 改為內文為空的節點, id 直接標在 head 標題</code></div>
<div class="line number89 index88 alt2"><code class="py spaces">    </code><code class="py plain">to_save_post_id.b<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">""</code></div>
<div class="line number90 index89 alt1"><code class="py spaces">    </code><code class="py plain">to_save_post_id.h<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">post_id</code></div>
<div class="line number91 index90 alt2"><code class="py spaces">    </code><code class="py comments"># 因為新增節點, commander 必須 redraw</code></div>
<div class="line number92 index91 alt1"><code class="py spaces">    </code><code class="py plain">c.redraw()</code></div>
<div class="line number93 index92 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"post_id 為"</code><code class="py plain">, post_id)</code></div>
<div class="line number94 index93 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"已經將資料送往 Blogger!"</code><code class="py plain">)</code></div>
<div class="line number95 index94 alt2"><code class="py keyword">except</code><code class="py plain">(client.AccessTokenRefreshError):</code></div>
<div class="line number96 index95 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"error"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>edit_to_blogger 按鈕內容:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_906297">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code><span> </span><code class="py plain">markdown<span> </span></code><code class="py keyword">import</code><span> </span><code class="py plain">markdown</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code><span> </span><code class="py plain">oauth2client<span> </span></code><code class="py keyword">import</code><span> </span><code class="py plain">client</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code><span> </span><code class="py plain">googleapiclient<span> </span></code><code class="py keyword">import</code><span> </span><code class="py plain">sample_tools</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code><span> </span><code class="py plain">os</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="py plain">os.environ[</code><code class="py string">'TZ'</code><code class="py plain">]<span> </span></code><code class="py keyword">=</code><span> </span><code class="py string">'Asia/Taipei'</code></div>
<div class="line number7 index6 alt2"><code class="py plain">argv<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">""</code></div>
<div class="line number8 index7 alt1"><code class="py comments"># 認證並建立服務</code></div>
<div class="line number9 index8 alt2"><code class="py comments"># name of the api is "blogger", version is "v3"</code></div>
<div class="line number10 index9 alt1"><code class="py comments"># description of the api is __doc__</code></div>
<div class="line number11 index10 alt2"><code class="py comments"># file name of the application: location of client_secrets.json</code></div>
<div class="line number12 index11 alt1"><code class="py plain">service, flags<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">sample_tools.init(</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">  </code><code class="py plain">argv,<span> </span></code><code class="py string">'blogger'</code><code class="py plain">,<span> </span></code><code class="py string">'v3'</code><code class="py plain">, __doc__,<span> </span></code><code class="py string">"./../../client_secrets.json"</code><code class="py plain">,</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">  </code><code class="py plain">scope</code><code class="py keyword">=</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">)</code></div>
<div class="line number15 index14 alt2"> </div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code><span> </span><code class="py plain">get_cat_tag_content(data):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py comments"># 用跳行符號分割</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">data_list<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">data.split(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py comments">#第 2 行為 title</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py plain">title</code><code class="py keyword">=</code><span> </span><code class="py plain">data_list[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py comments">#第 4 行為 category</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py plain">category<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">data_list[</code><code class="py value">3</code><code class="py plain">]</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py comments">#第 5 行為 tags</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py plain">tags<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">data_list[</code><code class="py value">4</code><code class="py plain">]</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 有多項資料的 content 型別為數列</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py comments"># 再將第 9 行之後的資料數列串回成以跳行隔開的資料</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py string">"\n"</code><code class="py plain">.join(data_list[</code><code class="py value">8</code><code class="py plain">:])</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments"># 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content.replace(</code><code class="py string">'&lt;!-- PELICAN_END_SUMMARY --&gt;'</code><code class="py plain">,<span> </span></code><code class="py string">'&lt;!--more--&gt;'</code><code class="py plain">)</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py comments"># 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~python', '[code lang="python"]')</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~', '[/code]')</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">    </code><code class="py keyword">return</code><span> </span><code class="py plain">title, category, tags, content</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="py comments"># 從目前所在節點的 body pan 中取出類別, tags 以及文章內容</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># p.h 為 @clean filename.md</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案</code></div>
<div class="line number40 index39 alt1"><code class="py plain">md_filename<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">p.h.split(</code><code class="py string">" "</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number41 index40 alt2"><code class="py plain">with<span> </span></code><code class="py functions">open</code><code class="py plain">(md_filename,<span> </span></code><code class="py string">'r'</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as content_file:</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">md_content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content_file.read()</code></div>
<div class="line number43 index42 alt2"><code class="py comments"># title_str, category_str, tags_str, content = get_cat_tag_content(p.b)</code></div>
<div class="line number44 index43 alt1"><code class="py plain">title_str, category_str, tags_str, content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">get_cat_tag_content(md_content)</code></div>
<div class="line number45 index44 alt2"><code class="py plain">category<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">category_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number46 index45 alt1"><code class="py plain">tags<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">tags_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">].split(</code><code class="py string">","</code><code class="py plain">)</code></div>
<div class="line number47 index46 alt2"><code class="py plain">tags.append(category)</code></div>
<div class="line number48 index47 alt1"><code class="py comments"># title 是一個單獨的字串</code></div>
<div class="line number49 index48 alt2"><code class="py plain">title<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">title_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number50 index49 alt1"><code class="py comments"># 將 markdown 格式 content 轉為 html</code></div>
<div class="line number51 index50 alt2"><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">markdown(content)</code></div>
<div class="line number52 index51 alt1"><code class="py comments"># 以下處理 content 的 &lt;h2&gt; 標題</code></div>
<div class="line number53 index52 alt2"><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content.replace(</code><code class="py string">"&lt;h2&gt;"</code><code class="py plain">,<span> </span></code><code class="py string">"&lt;h2&gt;&lt;font size='4'&gt;"</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"><code class="py plain">content<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">content.replace(</code><code class="py string">"&lt;/h2&gt;"</code><code class="py plain">,<span> </span></code><code class="py string">"&lt;/font&gt;&lt;/h2&gt;"</code><code class="py plain">)</code></div>
<div class="line number55 index54 alt2"><code class="py comments"># g.es(content)</code></div>
<div class="line number56 index55 alt1"> </div>
<div class="line number57 index56 alt2"><code class="py keyword">try</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py plain">blogs<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">service.blogs()</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py comments"># 取得使用者所建立網誌名稱</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py plain">blogs<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">blogs.listByUser(userId</code><code class="py keyword">=</code><code class="py string">'self'</code><code class="py plain">).execute()</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py plain">blog_id<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">blogs[</code><code class="py string">"items"</code><code class="py plain">][</code><code class="py value">0</code><code class="py plain">][</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py comments"># 設法取得原 post 的 id</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py plain">postid_outline<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">p.getLastChild()</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py comments"># 直接從標題取得 post 的 id 號碼</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py plain">post_id<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">postid_outline.h</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">posts<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">service.posts()</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments"># 更新網誌文章時的 body</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">body<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">{</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py string">"kind"</code><code class="py plain">:<span> </span></code><code class="py string">"blogger#post"</code><code class="py plain">,</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">    </code><code class="py string">"title"</code><code class="py plain">: title,</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py string">"content"</code><code class="py plain">: content</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">    </code><code class="py plain">}</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">    </code><code class="py comments"># need to save postId to outline head</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py plain">update<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">posts.update(blogId</code><code class="py keyword">=</code><code class="py plain">blog_id, postId</code><code class="py keyword">=</code><code class="py plain">post_id, body</code><code class="py keyword">=</code><code class="py plain">body, publish</code><code class="py keyword">=</code><code class="py color1">True</code><code class="py plain">)</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py plain">update_doc<span> </span></code><code class="py keyword">=</code><span> </span><code class="py plain">update.execute()</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">    </code><code class="py plain">os.remove(</code><code class="py string">"blogger.dat"</code><code class="py plain">)</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"post_id 為"</code><code class="py plain">, post_id)</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"已經將更新資料送往 Blogger!"</code><code class="py plain">)</code></div>
<div class="line number79 index78 alt2"><code class="py keyword">except</code><code class="py plain">(client.AccessTokenRefreshError):</code></div>
<div class="line number80 index79 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"error"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h2>w14</h2>
<p>直接在操作系統建立網際內容管理合用系統</p>
<p>Windows 10 64 位元操作系統</p>
<p>安裝 Python 3.8.3 與 pip</p>
<p>至 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> 下載 Python 3.8.3<span> </span><a href="https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe">Windows x86-64 executable installer</a></p>
<p>可以直接選擇安裝 pip 與所有選項內容</p>
<p>安裝 Git</p>
<p>利用 <a href="https://github.com/git-for-windows/git/releases/download/v2.26.2.windows.1/Git-2.26.2-64-bit.exe">64-bit Git for Windows Setup</a> 安裝 Git 工具.</p>
<p>安裝 CMSiMDE 所需模組</p>
<p>利用 cmd 開啟命令列視窗, 以 pip 安裝 flask flask_cors lxml bs4 markdown pelican leo 等模組</p>
<p>pip install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Ubuntu 20.04 操作系統 (請下載<a href="https://drive.google.com/open?id=13Gqwyj0CGR6wa9dZg_BmlCLv5cNYWQJ_"><span> </span>W12 Virtualbox 虛擬主機檔案</a>)</p>
<p>Ubuntu 20.04 同時存在 Python 2.7 與 Python 3.8.2,  CMSiMDE 只相容於 Python 3.8.2, 因此啟動指令必須使用:</p>
<p>python3 wsgi.py</p>
<p>與 </p>
<p>pip3 install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Mac OS X 操作系統</p>
<p>與 Ubuntu 20.04 類似.</p>
<h2>w15-18統整</h2>
<p>將 W1-W14 週的所有上課內容, 以圖文及影音資料加以整理在個人及分組倉儲、網站及簡報外,還要自選另一主題, 將分組協同的過程與內容整理在個人與分組的倉儲資料中.</p>
<h1>分組主題報告</h1>
<p>智慧型手表</p>
<p><img alt="全球智慧手錶市佔排名洗牌！蘋果稱霸、Android 用戶最愛品牌是它 ..." height="247" src="https://img.ltn.com.tw/Upload/3c/page/2019/05/03/190503-36651-1.jpg" width="422"/></p>
<h2>智慧型手錶</h2>
<h3>智慧型手錶的歷史</h3>
<h4 class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql"><br/>早期</h4>
<div class="o9v6fnle cxmmr5t8 oygrvhab hcukyx3x c1et5uql">
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><br/>1972年，第一個開發手腕計算技術的日本精工公司，首次發表第一款數位手錶，稱脈波星，由漢彌爾頓鐘錶公司所製造。「脈波星」被精工在1978年收購後成為一個品牌的名字。<br/>1982年，脈波星手錶（NL C01）發布，它可以儲存24個數位，使其成為可能是第一款用戶可自我編寫記憶體的手錶，或者叫做「記憶銀行」手錶。<br/>1983年，隨著個人電腦在20世紀80年代被引進，精工開始發展手錶的計算能力。2000資料手錶（1983年）有著一個外部鍵盤。資料通過鍵盤輸入進手錶。它的名字源於它能夠儲存2000個字元。D409是精工第一款直接在主機板上輸入資料的模式（通過一個微型鍵盤）和獨特的點陣顯示。Its memory was tiny, at only 112 digits.它於1984年發布的金、銀和黑色三個版本。在20世紀80年代最引人注目的是精工的「RC系列」：從1980年代開始，卡西歐除了做成計算機手錶外，還成功的做成了「電腦手錶」。最引人注目的是卡西歐資料銀行系列。此公司也生產例如Nelsonic遊戲手錶等一些「遊戲手錶」。<br/>精工RC系列<br/>1984年，精工發布第一個與電腦有關的模型，RC-1000腕部終端它相容於當時最流行的電腦，包括蘋果II代、II+代及IIe、the Commodore 64、IBM PC、NEC 8201、Tandy Color Computer、Model 1000、1200、2000和TRS-80 Model I、III、4及4p。<br/>1985年，精工發布第二個RC-20腕部電腦，它有著SMC84C00 8-位 Z-80 微處理器；8K的ROM和2K的RAM。他有著日程、備忘錄、世界時間和四種功能的計算機應用程式。它有著42x32像素的點陣式液晶顯示，並且更重要的是它是觸控式螢幕。同樣相似於RC-1000，它可以通過專用電纜連接到個人電腦。它是可程式化的，但是它的顯示器過小和儲存空間不足嚴重限制了應用程式的開發。<br/>1985年，而RC-4000 PC資料圖同樣於1985年發布，被稱為「世界上最小的電腦終端」。他有著2K的儲存空間。RC-4500（1985年），也被稱為腕部MAC，它有著鮮艷、明亮的顏色。</p>
<h4><br/>功能</h4>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p><br/>GPS功能<br/>GPS跟蹤裝置可以用來完成歷史資料的記錄，然後將資料上傳到電腦或網際網路上並建立一個紀錄檔進行之前練習活動的分析。<br/>此外，一些智慧型手錶有著全GPS導航儀，它擁有一個可以即時顯示地圖及當前坐標的螢幕，使用hh.mm.mmmm（小時，分鐘和分鐘的小數位）與GPS坐標格式。用戶可以通過「Mark（標記）」他們的當前位置，然後編輯這個條目的名稱和坐標，從而建立新的導航。</p>
<h2>系統區別</h2>
Linux手錶<br/>在2000年6月，IBM展示了一個執行於Linux的手錶原型。原始版本僅僅有6個小時的續航時間，後來改進版延長為了12個小時。它擁有8MB的記憶體，執行Linux2.2。該裝置後來增加了感應加速度、震動機制與指紋感測器。IBM開始與西鐵城鐘錶有限公司合夥打造「WatchPad」。WatchPad1.5版有著320 x 240QVGA解析度，且執行Linux 2.4系統。它還具有行事曆程式、藍牙、8MB的暫存空間與16MB的快閃記憶體空間。西鐵城把市場瞄向了學生和商人，並把該手錶的零售價定為399美元。然而在2001至2002年的某個時間，該專案被終止了。
<h3>Android</h3>
<p><span>Android，中文常譯作安卓或安致，是一個基於Linux核心的開放原始碼行動作業系統，由Google成立的開放手機聯盟持續領導與開發，主要設計用於觸控螢幕行動裝置如智慧型手機和平板電腦與其他可攜式裝置。</span></p>
<h3>watchOS</h3>
<p>蘋果公司在2015年正式發售的Apple Watch中首次使用了該系統。</p>
<h2>現代智慧型手錶名單</h2>
<p>in the 1970s，計算機手錶<br/>推出日期：1994年，TIMEX資料鏈系列<br/>開發日期：1998年，Ruputer（也被稱作「掌上PC」） – 一個有著2/4MB的臨時儲存空間的電腦。有著128kb RAM及3.6mhz的16-位CPU。可顯灰度螢幕。通過序列埠/序列紅外收發器連接電腦。2 x 2016或2032電池，1個月的電池壽命。應用程式包括電子試算表和記事本，以及各種遊戲。<br/>發布日期：2003年，Fossil腕部PDA – 此手錶可以執行Palm4作業系統且有8M內部儲存空間，資料儲存是暫時的，如果電量耗盡，那麼所有資料將遺失。可以通過MicroUSB以及紅外線與電腦連接。此表擁有顯示灰階的觸控式螢幕，龍珠 VZ CPU @ 55mhz。<br/>推出日期：2003年，Garmin先驅<br/>推出日期：2009年Q4，LG GD910（限量版）<br/>發布日期：2010年9月，第六代IPod nano - 有一個可拆卸的支架、用於固定手錶的錶帶和媒體播放器（電池可以連續使用1天，可以作為手錶使用）。<br/>發布日期：2012年第一季度，Sony SmartWatch 1 (第一代)<br/>發布日期：2012年9月，MetaWatch Strata<br/>發布日期：2013年6月，Sony SmartWatch 2<br/>發布日期：2013年7月，Pebble: E-paper手錶 - 這款手錶擁有電動遊戲，可以更改手錶介面，還可以收到文字（通過指定應用程式傳送），更可以告訴你有電話打進來了。手機用藍牙傳輸資料，電池可以連續使用達1個星期（升級版電池可以連續使用2至3周）。這款手錶目前正在批次生產中。<br/>海王星松樹（Neptune Pine） - 一個可以說是完全獨立的Android智慧型手錶，有3G、GPS、802.11 Wi-Fi、藍牙等等很多功能。<br/>Nike+ FuelBand與其他的NikeFuel ，如Nike+ SportWatch GPS裝置。<br/>i'm WATCH<br/>Samsung Galaxy Gear<br/>WIMM One（30小時）<br/>Suunto專門為訓練、潛水以及戶外運動設計的運動手錶。<br/>摩托羅拉Motoactv<br/>Cookoo<br/>Agent<br/>KREYOS<br/>Trakdot U1<br/>ZGPAX S5 android 4.0.3 CPU 1G/RAM:512M/HD:4G battery 500ma<br/>in watch_Z android 4.2 CPU 1.2G/RAM:1G/HD:8G battery 500ma<br/>simValley AW412 android 4.22 CPU 1.3G/RAM:1G/HD:4G battery 600ma<br/>gear watch android 4.1 CPU 1G/RAM:1G/HD:4G battery 330ma<br/>迪威諾 DS6 android 4 CPU 1G/RAM:128M/HD:4G battery 330ma<br/>愛酷 IK8 android 4 CPU 1G/RAM:512M/HD:4G battery 700ma<br/>Iradish I6 android 4.0.4 CPU 1G/RAM:512M/HD:4G battery 500ma<br/>Omate TrueSmart<br/>Z Watch<br/>蘋果手錶<br/>華為手錶<br/>華米手錶(大陸小米轉投資)<br/>小米手錶</p>
<p></p>
<h2>通俗文化</h2>
<p>20世紀40年代的卡通人物迪克·崔西有著一個可以接受及發射訊號的的手腕電台，它一直被視為現代智慧型手錶的先驅。</p>
<p>在1982年的電視連續劇霹靂遊俠中，主角麥可·奈特戴著可以雙向通訊的手錶。<img alt="鄭緯筌｜善用GIF 動態圖片塑造「品牌形象」，打造獨特而難忘的行銷體驗" height="168" src="https://www.marketersgo.com/wp-content/uploads/2019/01/tenor-1.gif" width="317"/></p>
<p></p>
<p></p>
<p></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>